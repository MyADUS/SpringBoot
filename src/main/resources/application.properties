server.port=8989
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

## mysql数据库连接信息
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/jspdemo?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
#spring.datasource.username=root
#spring.datasource.password=961009
##根据版本问题分别用com.mysql.cj.jdbc.Driver或com.mysql.jdbc.Driver
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# springboot连接多数据源配置
# 主数据源为MYSQL数据库（应在配置中设置为默认的）	其中.main为自定义（可为其他）
spring.datasource.main.name=mainMYSQL
spring.datasource.main.jdbc-url=jdbc:mysql://127.0.0.1:3306/jspdemo?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.main.username=root
spring.datasource.main.password=961009
spring.datasource.main.driver-class-name=com.mysql.jdbc.Driver

# 次数据源为MYSQL数据库		其中.secondary为自定义（可为其他）
spring.datasource.secondary.name=secondaryMYSQL
spring.datasource.secondary.jdbc-url=jdbc:mysql://127.0.0.1:3306/jspdemo_secondary?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.secondary.username=root
spring.datasource.secondary.password=961009
spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver

# 次数据源为DM数据库		其中.secondary为自定义（可为其他）
#spring.datasource.secondary.name=secondaryDM
#spring.datasource.secondary.jdbc-url=jdbc:dm://192.168.1.31:5210
#spring.datasource.secondary.username=ZHIJIANXZSP
#spring.datasource.secondary.password=BJyongjie123
#spring.datasource.secondary.driver-class-name=dm.jdbc.driver.DmDriver


#jpa操作数据库
#ddl-auto:设为create表示每次都重新建表
spring.jpa.database=MYSQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# dm数据库连接信息
#spring.datasource.driver-class-name=dm.jdbc.driver.DmDriver
#spring.datasource.url=jdbc:dm://192.168.1.31:5210
#spring.datasource.username=ZHIJIANXZSP
#spring.datasource.password=BJyongjie123

#让控制器输出的json格式更美观
#spring.jackson.serialization.indent-output=true
##定义时区，避免查询Date类型数据，查询结果与数据库不一样
#spring.jackson.time-zone=GMT+8
##定义查询到的Date类型数据，返回的时间格式
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss

##################################################
#                   通用Mapper         	         #
##################################################
mapper.mappers=com.test.config.MyMapper
mapper.not-empty=false
# dm
#mapper.identity=dm
# mysql
mapper.identity=mysql

# 整合slf4j 所需相关配置
debug=true
# 当项目启动时，控制台出现CONDITIONS EVALUATION REPORT 大量消息	添加下列配置
logging.level.org.springframework.boot.autoconfigure=ERROR
# logging.level.com.xx.xx.dao 这里包指向的为项目中dao层（springboot中的mapper层）
# 加入下列配置，即可在控制台（日志文件）中打印出使用的sql语句
logging.level.com.test.dao.mapper=debug
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
#1:logging.path和logging.file不可以同时配置,同时配置也只有logging.file起效
#2:配置logging.path将会在指定文件夹下面生成spring.log文件,文件名字无法控制
#3:配置logging.file,如果只是文件名如:demo.log只会在项目的根目录下生成指定文件名的日志文件,如果想控制日志路径,可以选择完整路径
#如:E:\\demo\\demo.log
logging.path=D:\eclipse\apache-tomcat-8.0.46\jspdemo_log
#测试后这玩意不管用 莫名其妙
#logging.file=demo.log
#在src/main/resources下，新建logback.xml(springboot默认名字)；如需更改，像下列方式
logging.config=classpath:logback-test.xml

#实体对象所在的包
mybatis.type-aliases-package=com.test.model
#配置Mapper.xml文件位置
#mybatis.mapper-locations=classpath:mapper/secondary/*.xml

# 文件上传配置
# 上传大于1M会报错 在配置文件中加入下列配置信息
#spring.servlet.multipart.max-file-size=100Mb
#spring.servlet.multipart.max-request-size=100Mb

# Redis缓存
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
# 端口为默认的（可修改）阿里云的服务器  
# 需下载安装Redis的Windows版本（地址：https://github.com/MicrosoftArchive/redis/releases）
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=10
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=20000
